@import "functions";
@import "palette";

/**
 * Returns a HSL string with fallback.
 */
@function construct-hsl ($hsl-var-name, $hue-var-name, $hsl, $alpha: null) {
	$h: nth($hsl, 1);
	$s: nth($hsl, 2);
	$l: nth($hsl, 3);

	@if ($alpha and $alpha != 1) {
		@return #{'hsla(var(--#{$hsl-var-name}, var(--#{$hue-var-name}, #{$h}), #{$s}, #{$l}), #{$alpha})'};

	} @else {
		@return #{'hsl(var(--#{$hsl-var-name}, var(--#{$hue-var-name}, #{$h}), #{$s}, #{$l}))'};
	}
}

/**
 * Returns a color variable with fallback.
 */
@function hsl-fallback ($palette, $name, $hue: 500, $alpha: null) {
	@return construct-hsl(
			$hsl-var-name: #{$name}-#{$hue},
			$hue-var-name: #{$name}-hue,
			$hsl: get-entry($palette, $hue),
			$alpha: $alpha
	);
}

/**
 * Returns a color contrast variable with fallback.
 */
@function hsl-contrast-fallback ($palette, $name, $hue: 500, $alpha: null) {
	@return construct-hsl(
			$hsl-var-name: #{$name}-#{$hue}-contrast,
			$hue-var-name: #{$name}-hue-contrast,
			$hsl: get-mapped-entry($palette, "contrast", $hue),
			$alpha: $alpha
	);
}

/**
 * Returns a color variable.
 */
@function color ($name, $hue: $default-hue, $alpha: null, $palette-map: $palette-map) {
	$palette: get-entry($palette-map, $name);
	@return hsl-fallback($palette, $name, $hue, $alpha);
}

/**
 * Returns a color contrast variable.
 */
@function color-contrast ($name, $hue: $default-hue, $alpha: null, $palette-map: $palette-map) {
	$palette: get-entry($palette-map, $name);
	@return hsl-contrast-fallback($palette, $name, $hue, $alpha);
}

$foreground: #{var(--foreground, hsl(200, 4%, 15%))};
$background: #{var(--background, hsl(0, 0%, 95%))};
$shadow: #{var(--shadow, hsla(0, 0%, 0%, 0.15))};
