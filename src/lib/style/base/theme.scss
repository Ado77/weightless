@import "functions";
@import "palette";

/**
 * Returns a color from a palette.
 */
@function _get-color($name, $hue: $default-hue, $palette-map: $palette-map) {
	@return get-entry(get-entry($palette-map, $name), $hue);
}

/**
 * Returns a contrast color to a color from a palette.
 */
@function _get-color-contrast($name, $hue: $default-hue, $palette-map: $palette-map) {
	$contrast: get-entry(get-entry($palette-map, $name), "contrast");

	// If the match is NOT a match we can simply return the match because it is then a color.
	@if (type-of($contrast) != map) {
		@return $contrast;

	} @else {
		@return get-entry($contrast, $hue);
	}
}

/**
 * Returns a dynamic color which is bound to a CSS variable.
 */
@function _get-dynamic-color($name, $hue: $default-hue, $palette-map: $palette-map) {
	@return #{'var(--#{$name}-#{$hue}, #{_get-color($name, $hue, $palette-map)})'};
}

/**
 * Returns a dynamic color contrast which is bound to a CSS variable.
 */
@function _get-dynamic-color-contrast($name, $hue: $default-hue, $palette-map: $palette-map) {
	@return #{'var(--#{$name}-#{$hue}-contrast, #{_get-color-contrast($name, $hue, $palette-map)})'};
}

/**
 * Returns a color variable.
 */
@function color ($name, $hue: $default-hue, $alpha: null, $palette-map: $palette-map) {
	$dynamic-color: _get-dynamic-color($name, $hue, $palette-map);
	@if ($alpha and $alpha >= 0 and $alpha < 1) {
		@return #{'rgba(#{$dynamic-color}, #{$alpha})'};

	} @else {
		@return #{'rgb(#{$dynamic-color})'};
	}
}

/**
 * Returns a color contrast variable.
 */
@function color-contrast ($name, $hue: $default-hue, $alpha: null, $palette-map: $palette-map) {
	$dynamic-color-contrast: _get-dynamic-color-contrast($name, $hue, $palette-map);
	@if ($alpha and $alpha >= 0 and $alpha < 1) {
		@return #{'rgba(#{$dynamic-color-contrast}, #{$alpha})'};

	} @else {
		@return #{'rgb(#{$dynamic-color-contrast})'};
	}
}

$foreground: var(--foreground, rgb(13, 13, 13));
$background: var(--background, rgb(255, 255, 255));
$shadow: var(--shadow, rgba(0, 0, 0, 0.2));