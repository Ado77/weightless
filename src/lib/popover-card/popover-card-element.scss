@import "../style/base";
@import "popover-card-vars";

:host {
	--card-elevation: #{$popover-card-elevation};

	display: flex;
	flex-direction: var(--_flex-direction, column);
}

#content {
	transform: translate(calc(#{$popover-card-arrow-width} * var(--_content-translate-x-multiplier, 0)), calc(#{$popover-card-arrow-width} * var(--_content-translate-y-multiplier, 0)));
}

#arrow {
	transform: rotate(var(--_arrow-rotation, 0deg)) translate(calc(50% * var(--_arrow-translate-x-multiplier, 0)), calc(50% * var(--_arrow-translate-y-multiplier, 0)));
	left: var(--_arrow-offset-x, unset);
	top: var(--_arrow-offset-y, unset);
	justify-self: var(--_justify-content, flex-start);
	align-self: var(--_align-items, flex-start);

	pointer-events: none;
	position: relative;
	width: #{$popover-card-arrow-width};
	height: #{$popover-card-arrow-height};
	fill: #{$popover-card-arrow-fill};
	z-index: 1;
}

// Position the arrow inside the arrow container according to the transform origin.
:host-context([transformOriginX="left"]) {
	--_align-items: flex-start;
}

:host-context([transformOriginX="center"]) {
	--_align-items: center;
}

:host-context([transformOriginX="right"]) {
	--_align-items: flex-end;
}

:host-context([transformOriginY="top"]) {
	--_justify-content: flex-start;
}

:host-context([transformOriginY="center"]) {
	--_justify-content: center;
}

:host-context([transformOriginY="bottom"]) {
	--_flex-direction: column-reverse;
}

// It doesn't make sense to show an arrow when the transform origin is in the center
:host-context([transformOriginX="center"][transformOriginY="center"]) {
	#arrow {
		display: none;
	}
}

// #####################################
// I LEARNED TO WRITE THE BELOW CODE IN A COURSE AT HOGWARTS. YES. MAGIC IS REAL.
// #####################################

// Top rules
:host-context([transformOriginX="left"][transformOriginY="top"]) {
	--_content-translate-x-multiplier: -2;
	--_arrow-translate-x-multiplier: -1;
}

:host-context([transformOriginX="right"][transformOriginY="top"]) {
	--_content-translate-x-multiplier: 2;
	--_arrow-translate-x-multiplier: 1;
}

// Bottom rules
:host-context([transformOriginY="bottom"]) {
	--_arrow-rotation: 180deg;
}

:host-context([transformOriginX="left"][transformOriginY="bottom"]) {
	--_content-translate-x-multiplier: -2;
	--_arrow-translate-x-multiplier: 1;
}

:host-context([transformOriginX="right"][transformOriginY="bottom"]) {
	--_content-translate-x-multiplier: 2;
	--_arrow-translate-x-multiplier: -1;
}

:host-context([transformOriginY="center"]) {
	--_arrow-translate-x-multiplier: 0;
}

// Center rules
:host-context([transformOriginY="center"]) {
	--_align-items: center;
}

:host-context([transformOriginX="left"][transformOriginY="center"]) {
	--_flex-direction: row;
	--_arrow-rotation: -90deg;

	#content {
		transform: translateX(calc(((#{$popover-card-arrow-width} - #{$popover-card-arrow-height}) / 2) * -1));
	}
}

:host-context([transformOriginX="right"][transformOriginY="center"]) {
	--_flex-direction: row-reverse;
	--_arrow-rotation: 90deg;

	#content {
		transform: translateX(calc((#{$popover-card-arrow-width} - #{$popover-card-arrow-height}) / 2));
	}
}